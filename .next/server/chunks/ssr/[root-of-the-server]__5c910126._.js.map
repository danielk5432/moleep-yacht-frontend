{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/iseojin/Desktop/%E1%84%86%E1%85%A9%E1%86%AF%E1%84%8B%E1%85%B5%E1%86%B8%E1%84%8F%E1%85%A2%E1%86%B7%E1%84%91%E1%85%B3/week2/moleep-yacht-frontend/src/app/components/DiceRoller.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useRef, useState} from 'react';\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon-es';\nimport { Dice } from '../types/dice';\nimport { mergeGeometries, mergeVertices } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport SelectedDiceView from './SelectedDiceView';\n\n\nconst DiceRoller: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const scoreRef = useRef<HTMLSpanElement | null>(null);\n\n  const rendererRef = useRef<THREE.WebGLRenderer>(null);\n  const sceneRef = useRef<THREE.Scene>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera>(null);\n  const diceMeshRef = useRef<THREE.Mesh>(null);\n  const physicsWorldRef = useRef<CANNON.World>(null);\n  const diceArrayRef = useRef<Dice[]>([]);\n  const [selectedMeshes, setSelectedMeshes] = useState<THREE.Mesh[]>([]);\n  const [selectedDiceMap, setSelectedDiceMap] = useState<Map<string, Dice>>(new Map());\n  const selectedCountRef = useRef(0); // 선택된 주사위 개수 추적\n  const selectedMeshRefs = useRef<THREE.Mesh[]>([]);\n\n\n  const fixedPositions: THREE.Vector3[] = [\n    new THREE.Vector3(6, 0, 0),\n    new THREE.Vector3(6, 0, 2),\n    new THREE.Vector3(6, 0, -2),\n    new THREE.Vector3(6, 0, 4),\n    new THREE.Vector3(6, 0, -4),\n  ];\n\n  const params = {\n    numberOfDice: 5,\n    segments: 40,\n    edgeRadius: 0.07,\n    notchRadius: 0.15,\n    notchDepth: 0.1,\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const scoreResult = scoreRef.current;\n    if (!canvas || !scoreResult) return;\n\n    const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });\n    renderer.shadowMap.enabled = true;\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.setSize(window.innerWidth, window.innerHeight - 100);\n    rendererRef.current = renderer;\n\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / (window.innerHeight - 100), 0.1, 300);\n    camera.position.set(0, 15, 0);\n    camera.up.set(0, 0, -1);\n    camera.lookAt(0, 0, 0);\n    cameraRef.current = camera;\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 5);\n    scene.add(ambientLight);\n\n    const topLight = new THREE.PointLight(0xffffff, 3);\n    topLight.position.set(0, 15, 0);\n    topLight.castShadow = true;\n    topLight.shadow.mapSize.width = 2048;\n    topLight.shadow.mapSize.height = 2048;\n    topLight.shadow.camera.near = 5;\n    topLight.shadow.camera.far = 400;\n\n    scene.add(topLight);\n    scene.background = new THREE.Color('#f0f0f0');\n\n    const physicsWorld = new CANNON.World({\n      allowSleep: true,\n      gravity: new CANNON.Vec3(0, -50, 0),\n    });\n    physicsWorld.defaultContactMaterial.restitution = 0.3;\n    physicsWorldRef.current = physicsWorld;\n\n    const floor = new THREE.Mesh(\n      new THREE.CircleGeometry(5, 64),\n      new THREE.MeshStandardMaterial({ color: 0x006600 }) // 초록색 felt 느낌\n    );\n    floor.receiveShadow = true;\n    floor.rotation.x = -Math.PI / 2;\n    floor.position.y = -7; \n    scene.add(floor);\n\n    const floorBody = new CANNON.Body({\n      type: CANNON.Body.STATIC,\n      shape: new CANNON.Plane(),\n    });\n    floorBody.position.copy(floor.position as any);\n    floorBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0);\n    physicsWorld.addBody(floorBody);\n\n    const wallRadius = 5;\n    const wallHeight = 2;\n    const wallThickness = 0.3;\n\n    // 비어 있는 원기둥으로 벽을 생성\n    const wall = new CANNON.Body({ type: CANNON.Body.STATIC });\n    const segments = 32;\n\n    for (let i = 0; i < segments; i++) {\n      const theta = (2 * Math.PI * i) / segments;\n      const x = Math.cos(theta) * wallRadius;\n      const z = Math.sin(theta) * wallRadius;\n\n      const box = new CANNON.Box(new CANNON.Vec3(wallThickness / 2, wallHeight / 2, 0.2));\n      const quaternion = new CANNON.Quaternion();\n      quaternion.setFromEuler(0, -theta, 0);\n\n      wall.addShape(box, new CANNON.Vec3(x, wallHeight / 2 - 7, z), quaternion);\n    }\n\n    physicsWorld.addBody(wall);\n\n    const ring = new THREE.Mesh(\n      new THREE.RingGeometry(wallRadius - wallThickness, wallRadius + wallThickness, 64),\n      new THREE.MeshStandardMaterial({ color: 0x8b4513, side: THREE.DoubleSide }) // 갈색 나무\n    );\n    ring.rotation.x = -Math.PI / 2;\n    ring.position.y = -7 + 0.01; // 살짝 위로\n    scene.add(ring);\n\n    function createDiceTextures(baseColor: string = '#ffffff') {\n      const textures : THREE.Texture[] =  [];\n      const dotRadius = 10;\n      const size = 100;\n\n      const dotPositions = [\n        [[1, 1]],\n        [[0, 0], [0, 2], [1, 0], [1, 2], [2, 0], [2, 2]],\n        [[0, 0], [2, 2]],\n        [[0, 0], [0, 2], [1, 1], [2, 0], [2, 2]],\n        [[0, 0], [1, 1], [2, 2]],\n        [[0, 0], [0, 2], [2, 0], [2, 2]],\n      ];\n\n      for (let i = 0; i < 6; i++) {\n        const canvas = document.createElement('canvas');\n        canvas.width = canvas.height = size;\n        const ctx = canvas.getContext('2d')!;\n\n        ctx.fillStyle = baseColor; // ✅ 배경색\n        ctx.fillRect(0, 0, size, size);\n\n        ctx.fillStyle = '#000000';\n        const spacing = size / 4;\n        for (const [row, col] of dotPositions[i]) {\n          ctx.beginPath();\n          ctx.arc(spacing * (col + 1), spacing * (row + 1), dotRadius, 0, Math.PI * 2);\n          ctx.fill();\n        }\n\n        textures.push(new THREE.CanvasTexture(canvas));\n      }\n\n      return textures;\n    }\n\n\n    function getTopFaceNumber(quaternion: THREE.Quaternion): number {\n      // 주사위의 로컬 Y+ 벡터 (윗면) → 월드 좌표계로 변환\n      const up = new THREE.Vector3(0, 1, 0);\n\n      // 각 면의 노멀과 숫자 매핑\n      const faceNormals = [\n        { normal: new THREE.Vector3(1, 0, 0), number: 1 },   // +X → texture[0]\n        { normal: new THREE.Vector3(-1, 0, 0), number: 6 },  // -X → texture[1]\n        { normal: new THREE.Vector3(0, 1, 0), number: 2 },   // +Y → texture[2]\n        { normal: new THREE.Vector3(0, -1, 0), number: 5 },  // -Y → texture[3]\n        { normal: new THREE.Vector3(0, 0, 1), number: 3 },   // +Z → texture[4]\n        { normal: new THREE.Vector3(0, 0, -1), number: 4 }   // -Z → texture[5]\n      ];\n\n      // 가장 유사한 노멀 (코사인 유사도 기반)\n      let maxDot = -Infinity;\n      let topNumber = 0;\n\n      for (const face of faceNormals) {\n        const dot = up.dot(face.normal.applyQuaternion(quaternion));\n        if (dot > maxDot) {\n          maxDot = dot;\n          topNumber = face.number;\n        }\n      }\n\n      return topNumber;\n    }\n\n    const createDiceMesh = (color: string) => {\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const textures = createDiceTextures();\n\n      const materials = textures.map(texture =>\n        new THREE.MeshStandardMaterial({\n          map: texture,\n          metalness: 0,\n          roughness: 0.3,\n        })\n      );\n\n      const mesh = new THREE.Mesh(geometry, materials);\n      mesh.castShadow = true;\n      return mesh;\n    };\n    const diceColors = ['#ffffff', '#ffdddd', '#ddffdd', '#ddddff', '#ffffdd'];\n\n    for (let i = 0; i < params.numberOfDice; i++) {\n      const index = i % diceColors.length;\n      const mesh = createDiceMesh(diceColors[index]);\n\n      scene.add(mesh);\n\n      const body = new CANNON.Body({\n        mass: 1,\n        shape: new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5)),\n        sleepTimeLimit: 0.1,\n      });\n\n      const initialPosition = new CANNON.Vec3(6, i * 1.5, 0);\n      body.position.copy(initialPosition);\n      mesh.position.copy(initialPosition);\n\n      physicsWorld.addBody(body);\n\n      diceArrayRef.current.push({\n        id: i,\n        mesh,\n        body,\n        selected: false,\n        originalPosition: initialPosition.clone(),\n        stoppedPosition: undefined,\n        stoppedQuaternion: undefined,\n      });\n    }\n\n    \n    let scored = false;\n\n    const render = () => {\n      physicsWorld.fixedStep();\n\n      let allSleeping = true;\n      for (const dice of diceArrayRef.current) {\n        dice.mesh.position.copy(dice.body.position);\n        dice.mesh.quaternion.copy(dice.body.quaternion);\n\n        if (dice.body.sleepState !== CANNON.Body.SLEEPING) {\n          allSleeping = false;\n        }\n      }\n\n      if (allSleeping && !scored) {\n        const scores = diceArrayRef.current.map(d => getTopFaceNumber(d.mesh.quaternion));\n        scoreRef.current!.innerHTML = scores.join(' + ') + ' = ' + scores.reduce((a, b) => a + b, 0);\n        scored = true;\n      }\n\n      renderer.render(scene, camera);\n      requestAnimationFrame(render);\n    };\n\n    const throwDice = () => {\n      scored = false;\n      if (!scoreResult) return;\n      scoreResult.innerHTML = '';\n      diceArrayRef.current.forEach((d, i) => {\n        d.body.velocity.setZero();\n        d.body.angularVelocity.setZero();\n        d.body.position = new CANNON.Vec3(6, i * 1.5, 0);\n        d.mesh.position.copy(d.body.position);\n        d.mesh.rotation.set(2 * Math.PI * Math.random(), 0, 2 * Math.PI * Math.random());\n\n        // ✅ three.js quaternion → cannon-es quaternion 변환\n        const threeQuat = d.mesh.quaternion;\n        d.body.quaternion.set(threeQuat.x, threeQuat.y, threeQuat.z, threeQuat.w);\n\n        const force = 3 + 5 * Math.random();\n        d.body.applyImpulse(new CANNON.Vec3(-force, force, 0), new CANNON.Vec3(0, 0, 0.2));\n        d.body.allowSleep = true;\n      });\n    };\n\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n\n    throwDice();\n    render();\n\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    const onClick = (event: MouseEvent) => {\n      if (!canvasRef.current || !cameraRef.current || !physicsWorldRef.current) return;\n\n      const rect = canvasRef.current.getBoundingClientRect();\n      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, cameraRef.current);\n\n      // 모든 주사위 (선택 여부 관계없이)에 대해 교차 검사\n      const intersects = raycaster.intersectObjects(\n        diceArrayRef.current.map(d => d.mesh),\n        true\n      );\n\n      if (intersects.length === 0) return;\n\n      const clickedMesh = intersects[0].object as THREE.Mesh;\n\n      // 클릭된 메시가 어떤 Dice 객체에 해당하는지 찾음\n      const clickedDice = diceArrayRef.current.find(d => d.mesh === clickedMesh);\n\n      if (!clickedDice) return; // 클릭된 메시가 주사위가 아니면 리턴\n\n      if (clickedDice.selected) {\n        // 🎯 이미 선택된 주사위를 다시 클릭 → 원래 상태로 복원\n        console.log(\"Clicked on an already selected dice. Restoring it.\");\n\n        clickedDice.selected = false;\n\n        // 물리 바디를 다시 활성화 (DYNAMIC)\n        clickedDice.body.type = CANNON.Body.DYNAMIC;\n        clickedDice.body.allowSleep = true;\n        clickedDice.body.velocity.setZero();\n        clickedDice.body.angularVelocity.setZero();\n\n        // 저장해 둔 물리 시뮬레이션이 멈춘 위치/회전으로 복원\n        if (clickedDice.stoppedPosition && clickedDice.stoppedQuaternion) {\n            clickedDice.body.position.copy(new CANNON.Vec3(\n                clickedDice.stoppedPosition.x,\n                clickedDice.stoppedPosition.y,\n                clickedDice.stoppedPosition.z\n            ));\n            clickedDice.body.quaternion.copy(new CANNON.Quaternion(\n                clickedDice.stoppedQuaternion.x,\n                clickedDice.stoppedQuaternion.y,\n                clickedDice.stoppedQuaternion.z,\n                clickedDice.stoppedQuaternion.w\n            ));\n        } else {\n            // stoppedPosition이 없으면 초기 originalPosition으로 복원 (안전 장치)\n            clickedDice.body.position.copy(clickedDice.originalPosition);\n            clickedDice.body.quaternion.set(0, 0, 0, 1);\n        }\n\n        clickedDice.mesh.position.copy(clickedDice.body.position as any);\n        clickedDice.mesh.quaternion.copy(clickedDice.body.quaternion as any);\n        clickedDice.body.wakeUp(); // 물리 시뮬레이션에 참여하도록 깨우기\n\n        setSelectedMeshes(prev => prev.filter(m => m.uuid !== clickedDice.mesh.uuid));\n        setSelectedDiceMap(prev => {\n          const map = new Map(prev);\n          map.delete(clickedDice.mesh.uuid);\n          return map;\n        });\n        selectedCountRef.current -= 1;\n\n      } else {\n        // 🎲 선택되지 않은 주사위를 클릭 → 선택된 위치로 이동\n        console.log(\"Clicked on an unselected dice. Selecting it.\");\n\n        // 주사위가 멈춰있을 때만 선택 가능하도록 (선택 시점의 최종 위치 저장)\n        if (clickedDice.body.sleepState !== CANNON.Body.SLEEPING) {\n          console.log(\"Dice is still moving, cannot select.\");\n          return;\n        }\n\n        clickedDice.selected = true;\n        clickedDice.stoppedPosition = clickedDice.mesh.position.clone(); // 물리 시뮬레이션이 멈춘 위치 저장\n        clickedDice.stoppedQuaternion = clickedDice.mesh.quaternion.clone(); // 물리 시뮬레이션이 멈춘 회전 저장\n\n        // 물리 바디를 STATIC으로 변경하여 물리 시뮬레이션의 영향을 받지 않도록 함\n        clickedDice.body.type = CANNON.Body.STATIC;\n        clickedDice.body.allowSleep = false; // 더 이상 슬립 상태가 되면 안됨\n\n        // 화면상에서 주사위를 고정된 위치로 직접 이동\n        const currentSelectedCount = selectedCountRef.current;\n        const targetPosition = fixedPositions[currentSelectedCount] ?? new THREE.Vector3(8, currentSelectedCount * 1.5, 0);\n\n        clickedDice.mesh.position.copy(targetPosition);\n        // 회전은 유지하거나 필요하면 특정 각도로 고정\n        // clickedDice.mesh.quaternion.identity(); // 예: 선택 시 정렬하고 싶다면\n\n        // 물리 바디의 위치도 해당 위치로 직접 설정\n        clickedDice.body.position.copy(new CANNON.Vec3(targetPosition.x, targetPosition.y, targetPosition.z));\n        // 물리 바디의 회전도 메시와 동기화\n        clickedDice.body.quaternion.copy(new CANNON.Quaternion(\n            clickedDice.mesh.quaternion.x,\n            clickedDice.mesh.quaternion.y,\n            clickedDice.mesh.quaternion.z,\n            clickedDice.mesh.quaternion.w\n        ));\n\n\n        setSelectedMeshes(prev => [...prev, clickedDice.mesh]);\n        setSelectedDiceMap(prev => {\n          const map = new Map(prev);\n          map.set(clickedDice.mesh.uuid, clickedDice);\n          return map;\n        });\n        selectedCountRef.current += 1;\n      }\n    };\n\n\n\n\n    canvas.addEventListener('click', onClick);\n    return () => {\n      canvas.removeEventListener('click', onClick);\n    };\n\n  }, []);\n  return (\n    <div className=\"relative w-full h-screen\">\n      {/* 시뮬레이터 canvas 전체화면 */}\n      <canvas ref={canvasRef} className=\"absolute top-0 left-0 w-full h-full z-0\" />\n      <div className=\"absolute top-4 left-4 z-10 bg-white px-3 py-2 rounded shadow text-gray-800 font-medium\">\n        선택된 주사위: {selectedMeshes.length}개\n      </div>\n      {/* 점수 및 버튼 (optional) */}\n      <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 z-10 text-center\">\n        \n        <span ref={scoreRef} className=\"text-lg font-semibold bg-white px-4 py-2 rounded shadow\" />\n        <button\n          onClick={() => window.location.reload()}\n          className=\"ml-4 px-4 py-2 bg-blue-500 text-white rounded shadow hover:bg-blue-600\"\n        >\n          Throw the Dice\n        </button>\n      </div>\n\n \n      \n    </div>\n  );\n};\n\nexport default DiceRoller;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 527, "column": 0}, "map": {"version":3,"sources":["file:///Users/iseojin/Desktop/%E1%84%86%E1%85%A9%E1%86%AF%E1%84%8B%E1%85%B5%E1%86%B8%E1%84%8F%E1%85%A2%E1%86%B7%E1%84%91%E1%85%B3/week2/moleep-yacht-frontend/src/app/dice/page.tsx"],"sourcesContent":["'use client';\n// src/pages/Dice.tsx\nimport React from 'react';\nimport DiceRoller from '../components/DiceRoller';\n\nconst Dice: React.FC = () => {\n  return (\n    <div>\n      <h1 className = 'text-center'>🎲 Dice Game</h1>\n      <DiceRoller />\n    </div>\n  );\n};\n\nexport default Dice;\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAKA,MAAM,OAAiB;IACrB,qBACE,8OAAC;;0BACC,8OAAC;gBAAG,WAAY;0BAAc;;;;;;0BAC9B,8OAAC,uIAAA,CAAA,UAAU;;;;;;;;;;;AAGjB;uCAEe","debugId":null}}]
}