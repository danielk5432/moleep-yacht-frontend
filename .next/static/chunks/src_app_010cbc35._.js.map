{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/iseojin/Desktop/%E1%84%86%E1%85%A9%E1%86%AF%E1%84%8B%E1%85%B5%E1%86%B8%E1%84%8F%E1%85%A2%E1%86%B7%E1%84%91%E1%85%B3/week2/moleep-yacht-frontend/src/app/components/DiceRoller.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useRef, useState} from 'react';\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon-es';\nimport { mergeGeometries, mergeVertices } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport SelectedDiceView from './SelectedDiceView';\n\ntype Dice = {\n  id: number;\n  mesh: THREE.Mesh;\n  body: CANNON.Body;\n  selected: boolean;\n   originalPosition: CANNON.Vec3; // 초기 생성 위치 (던지기 전 위치)\n  // finalPosition, finalQuaternion은 이제 '선택된 위치'가 아닌 '원본이 물리 시뮬레이션에서 멈춘 위치'를 저장하는 용도로 변경\n  // 굳이 필요 없다면 제거 가능하지만, 원본 위치 복원 시점에 유용할 수 있습니다.\n  stoppedPosition?: THREE.Vector3;\n  stoppedQuaternion?: THREE.Quaternion;\n};\n\nconst DiceRoller: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const scoreRef = useRef<HTMLSpanElement | null>(null);\n\n  const rendererRef = useRef<THREE.WebGLRenderer>(null);\n  const sceneRef = useRef<THREE.Scene>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera>(null);\n  const diceMeshRef = useRef<THREE.Mesh>(null);\n  const physicsWorldRef = useRef<CANNON.World>(null);\n  const diceArrayRef = useRef<Dice[]>([]);\n  const [selectedMeshes, setSelectedMeshes] = useState<THREE.Mesh[]>([]);\n  const [selectedDiceMap, setSelectedDiceMap] = useState<Map<string, Dice>>(new Map()); // Key: clonedMesh.uuid, Value: original Dice object\n  const selectedCountRef = useRef(0); // 선택된 주사위 개수 추적\n  const selectedMeshRefs = useRef<THREE.Mesh[]>([]); // This will hold references to the CLONED meshes\n\n\n  const fixedPositions: THREE.Vector3[] = [\n    new THREE.Vector3(6, 0, 0),\n    new THREE.Vector3(6, 0, 2),\n    new THREE.Vector3(6, 0, -2),\n    new THREE.Vector3(6, 0, 4),\n    new THREE.Vector3(6, 0, -4),\n  ];\n\n  const params = {\n    numberOfDice: 5,\n    segments: 40,\n    edgeRadius: 0.07,\n    notchRadius: 0.15,\n    notchDepth: 0.1,\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const scoreResult = scoreRef.current;\n    if (!canvas || !scoreResult) return;\n\n    const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });\n    renderer.shadowMap.enabled = true;\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.setSize(window.innerWidth, window.innerHeight - 100);\n    rendererRef.current = renderer;\n\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / (window.innerHeight - 100), 0.1, 300);\n    camera.position.set(0, 15, 0);\n    camera.up.set(0, 0, -1);\n    camera.lookAt(0, 0, 0);\n    cameraRef.current = camera;\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 5);\n    scene.add(ambientLight);\n\n    const topLight = new THREE.PointLight(0xffffff, 3);\n    topLight.position.set(0, 15, 0);\n    topLight.castShadow = true;\n    topLight.shadow.mapSize.width = 2048;\n    topLight.shadow.mapSize.height = 2048;\n    topLight.shadow.camera.near = 5;\n    topLight.shadow.camera.far = 400;\n\n    scene.add(topLight);\n    scene.background = new THREE.Color('#f0f0f0');\n\n    const physicsWorld = new CANNON.World({\n      allowSleep: true,\n      gravity: new CANNON.Vec3(0, -50, 0),\n    });\n    physicsWorld.defaultContactMaterial.restitution = 0.3;\n    physicsWorldRef.current = physicsWorld;\n\n    const floor = new THREE.Mesh(\n      new THREE.CircleGeometry(5, 64),\n      new THREE.MeshStandardMaterial({ color: 0x006600 }) // 초록색 felt 느낌\n    );\n    floor.receiveShadow = true;\n    floor.rotation.x = -Math.PI / 2;\n    floor.position.y = -7;\n    scene.add(floor);\n\n    const floorBody = new CANNON.Body({\n      type: CANNON.Body.STATIC,\n      shape: new CANNON.Plane(),\n    });\n    floorBody.position.copy(floor.position as any);\n    floorBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0);\n    physicsWorld.addBody(floorBody);\n\n    const wallRadius = 5;\n    const wallHeight = 2;\n    const wallThickness = 0.3;\n\n    // 비어 있는 원기둥으로 벽을 생성\n    const wall = new CANNON.Body({ type: CANNON.Body.STATIC });\n    const segments = 32;\n\n    for (let i = 0; i < segments; i++) {\n      const theta = (2 * Math.PI * i) / segments;\n      const x = Math.cos(theta) * wallRadius;\n      const z = Math.sin(theta) * wallRadius;\n\n      const box = new CANNON.Box(new CANNON.Vec3(wallThickness / 2, wallHeight / 2, 0.2));\n      const quaternion = new CANNON.Quaternion();\n      quaternion.setFromEuler(0, -theta, 0);\n\n      wall.addShape(box, new CANNON.Vec3(x, wallHeight / 2 - 7, z), quaternion);\n    }\n\n    physicsWorld.addBody(wall);\n\n    const ring = new THREE.Mesh(\n      new THREE.RingGeometry(wallRadius - wallThickness, wallRadius + wallThickness, 64),\n      new THREE.MeshStandardMaterial({ color: 0x8b4513, side: THREE.DoubleSide }) // 갈색 나무\n    );\n    ring.rotation.x = -Math.PI / 2;\n    ring.position.y = -7 + 0.01; // 살짝 위로\n    scene.add(ring);\n\n    function createDiceTextures(baseColor: string = '#ffffff') {\n      const textures : THREE.Texture[] =  [];\n      const dotRadius = 10;\n      const size = 100;\n\n      const dotPositions = [\n        [[1, 1]], // 1\n        [[0, 0], [2, 2]], // 2\n        [[0, 0], [1, 1], [2, 2]], // 3\n        [[0, 0], [0, 2], [2, 0], [2, 2]], // 4\n        [[0, 0], [0, 2], [1, 1], [2, 0], [2, 2]], // 5\n        [[0, 0], [0, 2], [1, 0], [1, 2], [2, 0], [2, 2]], // 6\n      ];\n\n      for (let i = 0; i < 6; i++) {\n        const canvas = document.createElement('canvas');\n        canvas.width = canvas.height = size;\n        const ctx = canvas.getContext('2d')!;\n\n        ctx.fillStyle = baseColor;\n        ctx.fillRect(0, 0, size, size);\n\n        ctx.fillStyle = '#000000';\n        const spacing = size / 4;\n        for (const [row, col] of dotPositions[i]) {\n          ctx.beginPath();\n          ctx.arc(spacing * (col + 1), spacing * (row + 1), dotRadius, 0, Math.PI * 2);\n          ctx.fill();\n        }\n\n        textures.push(new THREE.CanvasTexture(canvas));\n      }\n\n      return textures;\n    }\n\n\n    function getTopFaceNumber(quaternion: THREE.Quaternion): number {\n      const up = new THREE.Vector3(0, 1, 0);\n      const faceNormals = [\n        { normal: new THREE.Vector3(1, 0, 0), number: 1 },\n        { normal: new THREE.Vector3(-1, 0, 0), number: 6 },\n        { normal: new THREE.Vector3(0, 1, 0), number: 2 },\n        { normal: new THREE.Vector3(0, -1, 0), number: 5 },\n        { normal: new THREE.Vector3(0, 0, 1), number: 3 },\n        { normal: new THREE.Vector3(0, 0, -1), number: 4 }\n      ];\n\n      let maxDot = -Infinity;\n      let topNumber = 0;\n\n      for (const face of faceNormals) {\n        const dot = up.dot(face.normal.clone().applyQuaternion(quaternion)); // Clone to avoid modifying the original normal\n        if (dot > maxDot) {\n          maxDot = dot;\n          topNumber = face.number;\n        }\n      }\n      return topNumber;\n    }\n\n    const createDiceMesh = (color: string) => {\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const textures = createDiceTextures();\n\n      const materials = textures.map(texture =>\n        new THREE.MeshStandardMaterial({\n          map: texture,\n          metalness: 0,\n          roughness: 0.3,\n        })\n      );\n\n      const mesh = new THREE.Mesh(geometry, materials);\n      mesh.castShadow = true;\n      return mesh;\n    };\n\n\n    const diceColors = ['#ffffff', '#ffdddd', '#ddffdd', '#ddddff', '#ffffdd'];\n\n    for (let i = 0; i < params.numberOfDice; i++) {\n      const index = i % diceColors.length;\n      const mesh = createDiceMesh(diceColors[index]);\n\n      scene.add(mesh);\n\n      const body = new CANNON.Body({\n        mass: 1,\n        shape: new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5)),\n        sleepTimeLimit: 0.1,\n      });\n\n      const initialPosition = new CANNON.Vec3(6, i * 1.5, 0);\n      body.position.copy(initialPosition);\n      mesh.position.copy(initialPosition);\n\n      physicsWorld.addBody(body);\n\n      diceArrayRef.current.push({\n        id: i,\n        mesh,\n        body,\n        selected: false,\n        originalPosition: initialPosition.clone(),\n        stoppedPosition: undefined,\n        stoppedQuaternion: undefined,\n      });\n    }\n\n    let scored = false;\n\n    const render = () => {\n      physicsWorld.fixedStep();\n\n      let allSleeping = true;\n      for (const dice of diceArrayRef.current) {\n        // Only update position/quaternion for dice that are NOT selected\n        if (!dice.selected) {\n          dice.mesh.position.copy(dice.body.position as any);\n          dice.mesh.quaternion.copy(dice.body.quaternion as any);\n\n          if (dice.body.sleepState !== CANNON.Body.SLEEPING) {\n            allSleeping = false;\n          }\n        }\n      }\n\n      if (allSleeping && !scored) {\n        const scores = diceArrayRef.current.map(d => getTopFaceNumber(d.mesh.quaternion));\n        scoreRef.current!.innerHTML = scores.join(' + ') + ' = ' + scores.reduce((a, b) => a + b, 0);\n        scored = true;\n      }\n\n      renderer.render(scene, camera);\n      requestAnimationFrame(render);\n    };\n\n    const throwDice = () => {\n      scored = false;\n      if (!scoreResult) return;\n      scoreResult.innerHTML = '';\n\n      // Clear all selected dice and put them back into play before throwing\n      selectedMeshRefs.current.forEach(clonedMesh => {\n        const originalDice = selectedDiceMap.get(clonedMesh.uuid);\n        if (originalDice) {\n          // Remove the cloned mesh from the scene\n          scene.remove(clonedMesh);\n          // Re-add the original mesh to the scene\n          scene.add(originalDice.mesh);\n          // Mark as not selected\n          originalDice.selected = false;\n          // Reset its physics state\n          originalDice.body.velocity.setZero();\n          originalDice.body.angularVelocity.setZero();\n          originalDice.body.position.copy(originalDice.originalPosition);\n          originalDice.body.quaternion.set(0, 0, 0, 1); // Reset quaternion\n          originalDice.mesh.position.copy(originalDice.originalPosition);\n          originalDice.mesh.quaternion.identity(); // Reset quaternion\n          originalDice.body.wakeUp();\n        }\n      });\n      setSelectedMeshes([]);\n      setSelectedDiceMap(new Map());\n      selectedMeshRefs.current = [];\n      selectedCountRef.current = 0;\n\n\n      diceArrayRef.current.forEach((d, i) => {\n        // Ensure only unselected dice are thrown\n        if (!d.selected) {\n          d.body.velocity.setZero();\n          d.body.angularVelocity.setZero();\n          d.body.position.copy(d.originalPosition); // Use original position for reset\n          d.mesh.position.copy(d.body.position as any);\n          d.mesh.rotation.set(2 * Math.PI * Math.random(), 0, 2 * Math.PI * Math.random());\n\n          const threeQuat = d.mesh.quaternion;\n          d.body.quaternion.set(threeQuat.x, threeQuat.y, threeQuat.z, threeQuat.w);\n\n          const force = 3 + 5 * Math.random();\n          d.body.applyImpulse(new CANNON.Vec3(-force, force, 0), new CANNON.Vec3(0, 0, 0.2));\n          d.body.allowSleep = true;\n        }\n      });\n    };\n\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n\n    throwDice();\n    render();\n\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    const onClick = (event: MouseEvent) => {\n      if (!canvasRef.current || !cameraRef.current || !physicsWorldRef.current) return;\n\n      const rect = canvasRef.current.getBoundingClientRect();\n      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, cameraRef.current);\n\n      // 모든 주사위 (선택 여부 관계없이)에 대해 교차 검사\n      const intersects = raycaster.intersectObjects(\n        diceArrayRef.current.map(d => d.mesh),\n        true\n      );\n\n      if (intersects.length === 0) return;\n\n      const clickedMesh = intersects[0].object as THREE.Mesh;\n\n      // 클릭된 메시가 어떤 Dice 객체에 해당하는지 찾음\n      const clickedDice = diceArrayRef.current.find(d => d.mesh === clickedMesh);\n\n      if (!clickedDice) return; // 클릭된 메시가 주사위가 아니면 리턴\n\n      if (clickedDice.selected) {\n        // 🎯 이미 선택된 주사위를 다시 클릭 → 원래 상태로 복원\n        console.log(\"Clicked on an already selected dice. Restoring it.\");\n\n        clickedDice.selected = false;\n\n        // 물리 바디를 다시 활성화 (DYNAMIC)\n        clickedDice.body.type = CANNON.Body.DYNAMIC;\n        clickedDice.body.allowSleep = true;\n        clickedDice.body.velocity.setZero();\n        clickedDice.body.angularVelocity.setZero();\n\n        // 저장해 둔 물리 시뮬레이션이 멈춘 위치/회전으로 복원\n        if (clickedDice.stoppedPosition && clickedDice.stoppedQuaternion) {\n            clickedDice.body.position.copy(new CANNON.Vec3(\n                clickedDice.stoppedPosition.x,\n                clickedDice.stoppedPosition.y,\n                clickedDice.stoppedPosition.z\n            ));\n            clickedDice.body.quaternion.copy(new CANNON.Quaternion(\n                clickedDice.stoppedQuaternion.x,\n                clickedDice.stoppedQuaternion.y,\n                clickedDice.stoppedQuaternion.z,\n                clickedDice.stoppedQuaternion.w\n            ));\n        } else {\n            // stoppedPosition이 없으면 초기 originalPosition으로 복원 (안전 장치)\n            clickedDice.body.position.copy(clickedDice.originalPosition);\n            clickedDice.body.quaternion.set(0, 0, 0, 1);\n        }\n\n        clickedDice.mesh.position.copy(clickedDice.body.position as any);\n        clickedDice.mesh.quaternion.copy(clickedDice.body.quaternion as any);\n        clickedDice.body.wakeUp(); // 물리 시뮬레이션에 참여하도록 깨우기\n\n        setSelectedMeshes(prev => prev.filter(m => m.uuid !== clickedDice.mesh.uuid));\n        setSelectedDiceMap(prev => {\n          const map = new Map(prev);\n          map.delete(clickedDice.mesh.uuid);\n          return map;\n        });\n        selectedCountRef.current -= 1;\n\n      } else {\n        // 🎲 선택되지 않은 주사위를 클릭 → 선택된 위치로 이동\n        console.log(\"Clicked on an unselected dice. Selecting it.\");\n\n        // 주사위가 멈춰있을 때만 선택 가능하도록 (선택 시점의 최종 위치 저장)\n        if (clickedDice.body.sleepState !== CANNON.Body.SLEEPING) {\n          console.log(\"Dice is still moving, cannot select.\");\n          return;\n        }\n\n        clickedDice.selected = true;\n        clickedDice.stoppedPosition = clickedDice.mesh.position.clone(); // 물리 시뮬레이션이 멈춘 위치 저장\n        clickedDice.stoppedQuaternion = clickedDice.mesh.quaternion.clone(); // 물리 시뮬레이션이 멈춘 회전 저장\n\n        // 물리 바디를 STATIC으로 변경하여 물리 시뮬레이션의 영향을 받지 않도록 함\n        clickedDice.body.type = CANNON.Body.STATIC;\n        clickedDice.body.allowSleep = false; // 더 이상 슬립 상태가 되면 안됨\n\n        // 화면상에서 주사위를 고정된 위치로 직접 이동\n        const currentSelectedCount = selectedCountRef.current;\n        const targetPosition = fixedPositions[currentSelectedCount] ?? new THREE.Vector3(8, currentSelectedCount * 1.5, 0);\n\n        clickedDice.mesh.position.copy(targetPosition);\n        // 회전은 유지하거나 필요하면 특정 각도로 고정\n        // clickedDice.mesh.quaternion.identity(); // 예: 선택 시 정렬하고 싶다면\n\n        // 물리 바디의 위치도 해당 위치로 직접 설정\n        clickedDice.body.position.copy(new CANNON.Vec3(targetPosition.x, targetPosition.y, targetPosition.z));\n        // 물리 바디의 회전도 메시와 동기화\n        clickedDice.body.quaternion.copy(new CANNON.Quaternion(\n            clickedDice.mesh.quaternion.x,\n            clickedDice.mesh.quaternion.y,\n            clickedDice.mesh.quaternion.z,\n            clickedDice.mesh.quaternion.w\n        ));\n\n\n        setSelectedMeshes(prev => [...prev, clickedDice.mesh]);\n        setSelectedDiceMap(prev => {\n          const map = new Map(prev);\n          map.set(clickedDice.mesh.uuid, clickedDice);\n          return map;\n        });\n        selectedCountRef.current += 1;\n      }\n    };\n\n    canvas.addEventListener('click', onClick);\n    return () => {\n      canvas.removeEventListener('click', onClick);\n    };\n\n  }, []);\n\n  return (\n    <div className=\"relative w-full h-screen\">\n      <canvas ref={canvasRef} className=\"absolute top-0 left-0 w-full h-full z-0\" />\n      <div className=\"absolute top-4 left-4 z-10 bg-white px-3 py-2 rounded shadow text-gray-800 font-medium\">\n        Selected Dice: {selectedMeshes.length}\n      </div>\n      <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 z-10 text-center\">\n        <span ref={scoreRef} className=\"text-lg font-semibold bg-white px-4 py-2 rounded shadow\" />\n        <button\n          onClick={() => window.location.reload()} // Changed to reload for simplicity for now\n          className=\"ml-4 px-4 py-2 bg-blue-500 text-white rounded shadow hover:bg-blue-600\"\n        >\n          Throw the Dice\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DiceRoller;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///Users/iseojin/Desktop/%E1%84%86%E1%85%A9%E1%86%AF%E1%84%8B%E1%85%B5%E1%86%B8%E1%84%8F%E1%85%A2%E1%86%B7%E1%84%91%E1%85%B3/week2/moleep-yacht-frontend/src/app/dice/page.tsx"],"sourcesContent":["'use client';\n// src/pages/Dice.tsx\nimport React from 'react';\nimport DiceRoller from '../components/DiceRoller';\n\nconst Dice: React.FC = () => {\n  return (\n    <div>\n      <h1 className = 'text-center'>🎲 Dice Game</h1>\n      <DiceRoller />\n    </div>\n  );\n};\n\nexport default Dice;\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAKA,MAAM,OAAiB;IACrB,qBACE,6LAAC;;0BACC,6LAAC;gBAAG,WAAY;0BAAc;;;;;;0BAC9B,6LAAC,0IAAA,CAAA,UAAU;;;;;;;;;;;AAGjB;KAPM;uCASS","debugId":null}}]
}